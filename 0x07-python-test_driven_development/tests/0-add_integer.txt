>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(0, 0)
0
>>> add_integer(150, 0)
150
>>> add_integer(0,150)
150
>>> add_integer(-50,150)
100
>>> add_integer(50,-150)
-100
>>> add_integer(50)
148
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> add_integer('a', 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/imad/projects/alx_africa/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer('a', 42)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/imad/projects/alx_africa/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer('a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/imad/projects/alx_africa/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(42, 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/imad/projects/alx_africa/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 10, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/imad/projects/alx_africa/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer
    a = int(a)
OverflowError: cannot convert float infinity to integer
